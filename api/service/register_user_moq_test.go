// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/pollenjp/gameserver-go/api/entity"
	"github.com/pollenjp/gameserver-go/api/repository"
	"sync"
)

// Ensure, that UserRegistrarMock does implement UserRegistrar.
// If this is not the case, regenerate this file with moq.
var _ UserRegistrar = &UserRegistrarMock{}

// UserRegistrarMock is a mock implementation of UserRegistrar.
//
//	func TestSomethingThatUsesUserRegistrar(t *testing.T) {
//
//		// make and configure a mocked UserRegistrar
//		mockedUserRegistrar := &UserRegistrarMock{
//			CreateUserFunc: func(ctx context.Context, db repository.Execer, u *entity.User) error {
//				panic("mock out the CreateUser method")
//			},
//		}
//
//		// use mockedUserRegistrar in code that requires UserRegistrar
//		// and then make assertions.
//
//	}
type UserRegistrarMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, db repository.Execer, u *entity.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Execer
			// U is the u argument value.
			U *entity.User
		}
	}
	lockCreateUser sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserRegistrarMock) CreateUser(ctx context.Context, db repository.Execer, u *entity.User) error {
	if mock.CreateUserFunc == nil {
		panic("UserRegistrarMock.CreateUserFunc: method is nil but UserRegistrar.CreateUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Execer
		U   *entity.User
	}{
		Ctx: ctx,
		Db:  db,
		U:   u,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, db, u)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserRegistrar.CreateUserCalls())
func (mock *UserRegistrarMock) CreateUserCalls() []struct {
	Ctx context.Context
	Db  repository.Execer
	U   *entity.User
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Execer
		U   *entity.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}
