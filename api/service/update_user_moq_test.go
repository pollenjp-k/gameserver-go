// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/pollenjp/gameserver-go/api/entity"
	"sync"
)

// Ensure, that UserUpdaterMock does implement UserUpdater.
// If this is not the case, regenerate this file with moq.
var _ UserUpdater = &UserUpdaterMock{}

// UserUpdaterMock is a mock implementation of UserUpdater.
//
//	func TestSomethingThatUsesUserUpdater(t *testing.T) {
//
//		// make and configure a mocked UserUpdater
//		mockedUserUpdater := &UserUpdaterMock{
//			UpdateUserFunc: func(ctx context.Context, db Execer, newUser *entity.User) error {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedUserUpdater in code that requires UserUpdater
//		// and then make assertions.
//
//	}
type UserUpdaterMock struct {
	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, db Execer, newUser *entity.User) error

	// calls tracks calls to the methods.
	calls struct {
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db Execer
			// NewUser is the newUser argument value.
			NewUser *entity.User
		}
	}
	lockUpdateUser sync.RWMutex
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserUpdaterMock) UpdateUser(ctx context.Context, db Execer, newUser *entity.User) error {
	if mock.UpdateUserFunc == nil {
		panic("UserUpdaterMock.UpdateUserFunc: method is nil but UserUpdater.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Db      Execer
		NewUser *entity.User
	}{
		Ctx:     ctx,
		Db:      db,
		NewUser: newUser,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, db, newUser)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserUpdater.UpdateUserCalls())
func (mock *UserUpdaterMock) UpdateUserCalls() []struct {
	Ctx     context.Context
	Db      Execer
	NewUser *entity.User
} {
	var calls []struct {
		Ctx     context.Context
		Db      Execer
		NewUser *entity.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
