// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/pollenjp/gameserver-go/api/entity"
	"github.com/pollenjp/gameserver-go/api/repository"
	"sync"
)

// Ensure, that UserGetterMock does implement UserGetter.
// If this is not the case, regenerate this file with moq.
var _ UserGetter = &UserGetterMock{}

// UserGetterMock is a mock implementation of UserGetter.
//
//	func TestSomethingThatUsesUserGetter(t *testing.T) {
//
//		// make and configure a mocked UserGetter
//		mockedUserGetter := &UserGetterMock{
//			GetUserFromIdFunc: func(ctx context.Context, db repository.Queryer, userId entity.UserID) (*entity.User, error) {
//				panic("mock out the GetUserFromId method")
//			},
//		}
//
//		// use mockedUserGetter in code that requires UserGetter
//		// and then make assertions.
//
//	}
type UserGetterMock struct {
	// GetUserFromIdFunc mocks the GetUserFromId method.
	GetUserFromIdFunc func(ctx context.Context, db repository.Queryer, userId entity.UserID) (*entity.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserFromId holds details about calls to the GetUserFromId method.
		GetUserFromId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Queryer
			// UserId is the userId argument value.
			UserId entity.UserID
		}
	}
	lockGetUserFromId sync.RWMutex
}

// GetUserFromId calls GetUserFromIdFunc.
func (mock *UserGetterMock) GetUserFromId(ctx context.Context, db repository.Queryer, userId entity.UserID) (*entity.User, error) {
	if mock.GetUserFromIdFunc == nil {
		panic("UserGetterMock.GetUserFromIdFunc: method is nil but UserGetter.GetUserFromId was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Db     repository.Queryer
		UserId entity.UserID
	}{
		Ctx:    ctx,
		Db:     db,
		UserId: userId,
	}
	mock.lockGetUserFromId.Lock()
	mock.calls.GetUserFromId = append(mock.calls.GetUserFromId, callInfo)
	mock.lockGetUserFromId.Unlock()
	return mock.GetUserFromIdFunc(ctx, db, userId)
}

// GetUserFromIdCalls gets all the calls that were made to GetUserFromId.
// Check the length with:
//
//	len(mockedUserGetter.GetUserFromIdCalls())
func (mock *UserGetterMock) GetUserFromIdCalls() []struct {
	Ctx    context.Context
	Db     repository.Queryer
	UserId entity.UserID
} {
	var calls []struct {
		Ctx    context.Context
		Db     repository.Queryer
		UserId entity.UserID
	}
	mock.lockGetUserFromId.RLock()
	calls = mock.calls.GetUserFromId
	mock.lockGetUserFromId.RUnlock()
	return calls
}
