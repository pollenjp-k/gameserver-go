// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/pollenjp/gameserver-go/api/entity"
	"github.com/pollenjp/gameserver-go/api/repository"
	"sync"
)

// Ensure, that AuthRepositoryMock does implement AuthRepository.
// If this is not the case, regenerate this file with moq.
var _ AuthRepository = &AuthRepositoryMock{}

// AuthRepositoryMock is a mock implementation of AuthRepository.
//
//	func TestSomethingThatUsesAuthRepository(t *testing.T) {
//
//		// make and configure a mocked AuthRepository
//		mockedAuthRepository := &AuthRepositoryMock{
//			GetUserFromTokenFunc: func(ctx context.Context, db repository.Queryer, userToken entity.UserTokenType) (*entity.User, error) {
//				panic("mock out the GetUserFromToken method")
//			},
//		}
//
//		// use mockedAuthRepository in code that requires AuthRepository
//		// and then make assertions.
//
//	}
type AuthRepositoryMock struct {
	// GetUserFromTokenFunc mocks the GetUserFromToken method.
	GetUserFromTokenFunc func(ctx context.Context, db repository.Queryer, userToken entity.UserTokenType) (*entity.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserFromToken holds details about calls to the GetUserFromToken method.
		GetUserFromToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Queryer
			// UserToken is the userToken argument value.
			UserToken entity.UserTokenType
		}
	}
	lockGetUserFromToken sync.RWMutex
}

// GetUserFromToken calls GetUserFromTokenFunc.
func (mock *AuthRepositoryMock) GetUserFromToken(ctx context.Context, db repository.Queryer, userToken entity.UserTokenType) (*entity.User, error) {
	if mock.GetUserFromTokenFunc == nil {
		panic("AuthRepositoryMock.GetUserFromTokenFunc: method is nil but AuthRepository.GetUserFromToken was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Db        repository.Queryer
		UserToken entity.UserTokenType
	}{
		Ctx:       ctx,
		Db:        db,
		UserToken: userToken,
	}
	mock.lockGetUserFromToken.Lock()
	mock.calls.GetUserFromToken = append(mock.calls.GetUserFromToken, callInfo)
	mock.lockGetUserFromToken.Unlock()
	return mock.GetUserFromTokenFunc(ctx, db, userToken)
}

// GetUserFromTokenCalls gets all the calls that were made to GetUserFromToken.
// Check the length with:
//
//	len(mockedAuthRepository.GetUserFromTokenCalls())
func (mock *AuthRepositoryMock) GetUserFromTokenCalls() []struct {
	Ctx       context.Context
	Db        repository.Queryer
	UserToken entity.UserTokenType
} {
	var calls []struct {
		Ctx       context.Context
		Db        repository.Queryer
		UserToken entity.UserTokenType
	}
	mock.lockGetUserFromToken.RLock()
	calls = mock.calls.GetUserFromToken
	mock.lockGetUserFromToken.RUnlock()
	return calls
}
