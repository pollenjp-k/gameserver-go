// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package room

import (
	"context"
	"github.com/pollenjp/gameserver-go/api/entity"
	"sync"
)

// Ensure, that CreateRoomServiceMock does implement CreateRoomService.
// If this is not the case, regenerate this file with moq.
var _ CreateRoomService = &CreateRoomServiceMock{}

// CreateRoomServiceMock is a mock implementation of CreateRoomService.
//
//	func TestSomethingThatUsesCreateRoomService(t *testing.T) {
//
//		// make and configure a mocked CreateRoomService
//		mockedCreateRoomService := &CreateRoomServiceMock{
//			CreateRoomFunc: func(ctx context.Context, liveId entity.LiveId, hostUserId entity.UserId) (*entity.Room, *entity.RoomUser, error) {
//				panic("mock out the CreateRoom method")
//			},
//		}
//
//		// use mockedCreateRoomService in code that requires CreateRoomService
//		// and then make assertions.
//
//	}
type CreateRoomServiceMock struct {
	// CreateRoomFunc mocks the CreateRoom method.
	CreateRoomFunc func(ctx context.Context, liveId entity.LiveId, hostUserId entity.UserId) (*entity.Room, *entity.RoomUser, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateRoom holds details about calls to the CreateRoom method.
		CreateRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LiveId is the liveId argument value.
			LiveId entity.LiveId
			// HostUserId is the hostUserId argument value.
			HostUserId entity.UserId
		}
	}
	lockCreateRoom sync.RWMutex
}

// CreateRoom calls CreateRoomFunc.
func (mock *CreateRoomServiceMock) CreateRoom(ctx context.Context, liveId entity.LiveId, hostUserId entity.UserId) (*entity.Room, *entity.RoomUser, error) {
	if mock.CreateRoomFunc == nil {
		panic("CreateRoomServiceMock.CreateRoomFunc: method is nil but CreateRoomService.CreateRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		LiveId     entity.LiveId
		HostUserId entity.UserId
	}{
		Ctx:        ctx,
		LiveId:     liveId,
		HostUserId: hostUserId,
	}
	mock.lockCreateRoom.Lock()
	mock.calls.CreateRoom = append(mock.calls.CreateRoom, callInfo)
	mock.lockCreateRoom.Unlock()
	return mock.CreateRoomFunc(ctx, liveId, hostUserId)
}

// CreateRoomCalls gets all the calls that were made to CreateRoom.
// Check the length with:
//
//	len(mockedCreateRoomService.CreateRoomCalls())
func (mock *CreateRoomServiceMock) CreateRoomCalls() []struct {
	Ctx        context.Context
	LiveId     entity.LiveId
	HostUserId entity.UserId
} {
	var calls []struct {
		Ctx        context.Context
		LiveId     entity.LiveId
		HostUserId entity.UserId
	}
	mock.lockCreateRoom.RLock()
	calls = mock.calls.CreateRoom
	mock.lockCreateRoom.RUnlock()
	return calls
}
