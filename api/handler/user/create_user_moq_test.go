// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"context"
	"github.com/pollenjp/gameserver-go/api/entity"
	"sync"
)

// Ensure, that CreateUserServiceMock does implement CreateUserService.
// If this is not the case, regenerate this file with moq.
var _ CreateUserService = &CreateUserServiceMock{}

// CreateUserServiceMock is a mock implementation of CreateUserService.
//
//	func TestSomethingThatUsesCreateUserService(t *testing.T) {
//
//		// make and configure a mocked CreateUserService
//		mockedCreateUserService := &CreateUserServiceMock{
//			CreateUserFunc: func(ctx context.Context, name string, leaderCard entity.LeaderCardIdIDType) (*entity.User, error) {
//				panic("mock out the CreateUser method")
//			},
//		}
//
//		// use mockedCreateUserService in code that requires CreateUserService
//		// and then make assertions.
//
//	}
type CreateUserServiceMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, name string, leaderCard entity.LeaderCardIdIDType) (*entity.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// LeaderCard is the leaderCard argument value.
			LeaderCard entity.LeaderCardIdIDType
		}
	}
	lockCreateUser sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *CreateUserServiceMock) CreateUser(ctx context.Context, name string, leaderCard entity.LeaderCardIdIDType) (*entity.User, error) {
	if mock.CreateUserFunc == nil {
		panic("CreateUserServiceMock.CreateUserFunc: method is nil but CreateUserService.CreateUser was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Name       string
		LeaderCard entity.LeaderCardIdIDType
	}{
		Ctx:        ctx,
		Name:       name,
		LeaderCard: leaderCard,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, name, leaderCard)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedCreateUserService.CreateUserCalls())
func (mock *CreateUserServiceMock) CreateUserCalls() []struct {
	Ctx        context.Context
	Name       string
	LeaderCard entity.LeaderCardIdIDType
} {
	var calls []struct {
		Ctx        context.Context
		Name       string
		LeaderCard entity.LeaderCardIdIDType
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}
